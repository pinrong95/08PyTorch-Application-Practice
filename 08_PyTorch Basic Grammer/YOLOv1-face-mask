{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yj5RksNJq6o5FcH0e9dG5eDepDvzGVDA","timestamp":1737034036744},{"file_id":"1b1upkJ9zA9N_0adQ_znDiP-Hp_0n-oC4","timestamp":1650350483166},{"file_id":"1jmWlgG_uLtozxEPVFxpBc7Hk8Fum4VFJ","timestamp":1650285282587}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"iUZ4M0eqnMil"},"source":["Please download all the necessary files from the following link:\n","\n","~~https://drive.google.com/file/d/1XNR4sOpqeb2dcIbB8les9JgiaPUt64Cy/view?usp=sharing~~\n","\n","~~Then, unzip this zip file and upload this folder-YOLO_data_model_face_mask to your google drive under '/content/drive/My Drive/'~~\n","\n","However, because uploading extracted files will take too much time, from 2022/5/01, this script is modified to download the zip files, unzip them on (1) this tempariry space or (2) \"your google drive\"!\n","\n","As of 2023/05/25, there is an unknown issue which will cause the following error message:\n","\n","```\n","File \"/usr/local/lib/python3.10/dist-packages/PIL/Image.py\", line 1680, in point\n","    return self._new(self.im.point(lut, mode))\n","TypeError: 'float' object cannot be interpreted as an integer\n","```\n","However, it is solved by modifying the function-distort_image(), Everything works now.\n","\n","\n","\n"]},{"cell_type":"code","source":["# update gdown for compatibility issue. 2022/12/12\n","!pip install --upgrade gdown"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I7u_lclARlDt","executionInfo":{"status":"ok","timestamp":1733683365576,"user_tz":-60,"elapsed":9137,"user":{"displayName":"Alex Lin","userId":"04926661606102487292"}},"outputId":"229951de-248d-43a6-cba1-df9bcec7990c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gdown in /usr/local/lib/python3.10/dist-packages (5.2.0)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from gdown) (4.12.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from gdown) (3.16.1)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.10/dist-packages (from gdown) (2.32.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from gdown) (4.66.6)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->gdown) (2.6)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (2024.8.30)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.10/dist-packages (from requests[socks]->gdown) (1.7.1)\n"]}]},{"cell_type":"code","source":["import os\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# The flag to determine where to put the downloaded files.\n","# True: zip file will be downloaded to this space\n","# False:\n","# manually download file folder from https://drive.google.com/file/d/1XNR4sOpqeb2dcIbB8les9JgiaPUt64Cy/view?usp=sharing\n","# unzip it and upload the folder-YOLO_data_model to the 1st level of your google drive which is actually \"/content/drive/My Drive/\"\n","In_this_space_flag = True\n","\n","\n","if In_this_space_flag == True and os.path.isdir(\"/content/YOLO_data_model_face_mask/\") == False:\n","  # download the zip file and extract them:\n","  os.system(\"gdown https://drive.google.com/uc?id=1XNR4sOpqeb2dcIbB8les9JgiaPUt64Cy\") # please remind that executing unzip using os.system() won't let you see the unzip message\n","  os.system(\"unzip YOLO_data_model_face_mask.zip\")\n","  os.remove(\"YOLO_data_model_face_mask.zip\")\n","\n","elif In_this_space_flag == False: # and os.path.isdir(\"/content/drive/My Drive/YOLO_data_model_face_mask/\") == True:\n","  drive.mount('/content/drive')\n","  assert os.path.isdir(\"/content/drive/My Drive/YOLO_data_model_face_mask/\") == True\n","\n","## face-mask-Alexnet example\n","#https://colab.research.google.com/drive/1BC-53_OWkVTOCTEU8L_Eo5eQ889E0S--?usp=sharing\n","\n"],"metadata":{"id":"gY11BllNv71Q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733683461574,"user_tz":-60,"elapsed":96002,"user":{"displayName":"Alex Lin","userId":"04926661606102487292"}},"outputId":"3b9f6eef-a5e1-4847-c6cb-8e2db99e22b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"mRI6PAbz3sb1","colab":{"base_uri":"https://localhost:8080/","height":417},"executionInfo":{"status":"ok","timestamp":1733683462710,"user_tz":-60,"elapsed":1140,"user":{"displayName":"Alex Lin","userId":"04926661606102487292"}},"outputId":"d2a99103-2607-41f2-e0af-e1228a9ca7ac"},"source":["\n","from google.colab.patches import cv2_imshow\n","\n","import cv2 as cv\n","\n","if In_this_space_flag == True:\n","  VOC_root_dir = \"/content/YOLO_data_model_face_mask/\"\n","else:\n","  VOC_root_dir = \"/content/drive/My Drive/YOLO_data_model_face_mask/\"\n","\n","# Let's try to shown an image for making sure that all the data under the folder-YOLO_data_model is accessible.\n","\n","#img_path = VOC_root_dir + \"images/maksssksksss841.png\" # without_mask\n","#img_path = VOC_root_dir + \"images/maksssksksss762.png\" # with_mask:\n","img_path = VOC_root_dir + \"images/maksssksksss132.png\" # mask_weared_incorrect: difficult case\n","\n","img1_rgb = cv.imread(img_path)\n","\n","cv2_imshow(img1_rgb)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=306x400>"],"image/png":"\n","image/jpeg":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"Jf2BcgrDxG0a"},"source":["import torch\n","import torch.optim as optim\n","from tqdm import tqdm\n","import numpy as np\n","from torchvision import transforms\n","import time\n","import os\n","\n","#classes = [\"aeroplane\", \"bicycle\", \"bird\", \"boat\", \"bottle\", \"bus\", \"car\", \"cat\",\n","#           \"chair\", \"cow\", \"diningtable\", \"dog\", \"horse\", \"motorbike\", \"person\",\n","#           \"pottedplant\", \"sheep\", \"sofa\", \"train\", \"tvmonitor\"]\n","classes = ['without_mask', 'with_mask', 'mask_weared_incorrect']\n","\n","bbox_num = 2\n","box_scale = 7\n","lr = 0.1e-3 # do remember that this is the initial learning rate; multifixed learning rate is manually written in the training loop\n","\n","\n","# Do remember that GT of training and testing data are given in two separate ways.\n","# In VOC2007_trainval.txt, every training jpg file and its corresponding GT (under /content/drive/My Drive/YOLO_data_model/VOCdevkit/VOC2007/Label) are listed line-by-line.\n","# So did VOC2007_test.txt. However, in test_result(), although the same data loader (VOCDatasets()) is used, only image file names are used for performing image inference.\n","# The inference results are stored under detection_result_txt_folder = \"/content/drive/My Drive/YOLO_data_model/detection_temp_folder/\".\n","# Then, mAP is estimated by reading the testing file list-test.txt under \"/content/drive/My Drive/YOLO_data_model/VOCdevkit/VOC2007/ImageSets/Main/\"\n","# and the filenames (no extension) listed line-by-line will be used to read GT (stored in xml files) under \"/content/drive/My Drive/YOLO_data_model/VOCdevkit/VOC2007/Annotation/\".\n","# The GT loaded in terms of pkls for mAP estimation is put under GT_temp_folder = \"/content/drive/My Drive/YOLO_data_model/GT_temp/\".\n","\n","# training image list\n","train_image_list = VOC_root_dir + \"train_list.txt\"\n","# tesing image list\n","eval_image_list = VOC_root_dir + \"test_list.txt\"\n","# folder for training or trained models\n","model_path = VOC_root_dir + \"trained_YOLO_model/\"\n","# pretrained model (darknet19)\n","pretrain_path = VOC_root_dir + \"darknet19_448.conv.23\"\n","\n","# data folder\n","#VOC_root_dir = root_dir + \"YOLO_data_model_face_mask/\"\n","# folder for detection result to be used for estimating mAP\n","detection_result_txt_folder = VOC_root_dir + \"detection_temp_folder/\"\n","# folder to store temp GT data (pkl files)\n","GT_temp_folder = VOC_root_dir + \"GT_temp/\"\n","# log file for mAP estimation corresponding to each epoch\n","savelog_filename = VOC_root_dir + \"savelog.txt\"\n","\n","#\n","#model_save_iter = 1  # epochs\n","epochs_start = 1 #0\n","epochs_end = 200 #150\n","batch_size =  12 #24 originally # the size depends on the RAM of GPU\n","cls_num = len(classes)\n","\n","## data augmentation\n","jitter = 0.2\n","hue = 0.1\n","saturation = 1.5\n","exposure = 1.5\n","\n","# weightings of loss\n","l_coord = 5\n","l_noobj = 0.5\n","\n","YOLO_cfg = {\n","    'ceils_size':7,\n","    'class_num':len(classes),\n","    'box_num':2,\n","    'image_size':[448,448]\n","}\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SIaeP_ul3Kv2"},"source":["# Model definition\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import numpy as np\n","from torch.autograd import Variable\n","\n","layer_configs = [\n","        # Unit1 (2)\n","        (32, 3, True),\n","        (64, 3, True),\n","        # Unit2 (3)\n","        (128, 3, False),\n","        (64, 1, False),\n","        (128, 3, True),\n","        # Unit3 (3)\n","        (256, 3, False),\n","        (128, 1, False),\n","        (256, 3, True),\n","        # Unit4 (5)\n","        (512, 3, False),\n","        (256, 1, False),\n","        (512, 3, False),\n","        (256, 1, False),\n","        (512, 3, True),\n","        # Unit5 (5)\n","        (1024, 3, False),\n","        (512, 1, False),\n","        (1024, 3, False),\n","        (512, 1, False),\n","        (1024, 3, False),\n","]\n","\n","\n","class conv_block(nn.Module):\n","\n","    def __init__(self,inplane,outplane,kernel_size,pool,stride=1):\n","        super(conv_block, self).__init__()\n","\n","        pad = 1 if kernel_size == 3 else 0\n","        self.conv = nn.Conv2d(inplane, outplane, kernel_size, stride=stride, padding=pad, bias=False)\n","        self.bn = nn.BatchNorm2d(outplane)\n","        self.act = nn.LeakyReLU(0.1)\n","        self.pool = pool #MaxPool2d(2,stride = 2)\n","\n","    def forward(self,x):\n","\n","        out = self.conv(x)\n","        out = self.bn(out)\n","        out = self.act(out)\n","\n","        if self.pool:\n","            out = F.max_pool2d(out,kernel_size=2,stride=2)\n","\n","        return out\n","\n","\n","class darknet_19(nn.Module):\n","\n","    def __init__(self,cls_num = 1000):\n","        super(darknet_19, self).__init__()\n","        self.class_num = cls_num\n","        self.feature = self.make_layers(3,layer_configs)\n","\n","\n","    def make_layers(self,inplane,cfg):\n","        layers = []\n","\n","        for outplane,kernel_size,pool in cfg:\n","            layers.append(conv_block(inplane,outplane,kernel_size,pool))\n","            inplane = outplane\n","\n","\n","        return nn.Sequential(*layers)\n","\n","    def load_weight(self,weight_file):\n","        print(\"Load pretrained models !\")\n","\n","        fp = open(weight_file, 'rb')\n","        header = np.fromfile(fp, count=4, dtype=np.int32)\n","        header = torch.from_numpy(header)\n","        buf = np.fromfile(fp, dtype = np.float32)\n","\n","        start = 0\n","        for idx,m in enumerate(self.feature.modules()):\n","            if isinstance(m, nn.Conv2d):\n","                conv = m\n","            if isinstance(m, nn.BatchNorm2d):\n","                bn = m\n","                start = load_conv_bn(buf,start,conv,bn)\n","\n","        assert start == buf.shape[0]\n","\n","    def forward(self, x):\n","\n","        output = self.feature(x)\n","\n","        return output\n","\n","class YOLO(nn.Module):\n","\n","    def __init__(self,cls_num,bbox_num = 2,scale_size = 7, pretrained = None):\n","        super(YOLO, self).__init__()\n","\n","        self.cls_num = cls_num\n","        self.feature = darknet_19()\n","        #self.conv_model = conv_model\n","        if pretrained is not None :\n","            self.feature.load_weight(pretrained)\n","\n","\n","        self.scale_size = scale_size\n","        self.bbox_num = bbox_num\n","        self.last_output = (5*self.bbox_num+self.cls_num)\n","\n","        cx = torch.linspace(0.5 / scale_size, (scale_size-0.5) / scale_size, steps=scale_size).\\\n","            view(-1, scale_size).repeat(scale_size, 1).view(scale_size, scale_size, -1)\n","        cy = torch.linspace(0.5 / scale_size, (scale_size-0.5) / scale_size, steps=scale_size).\\\n","            view(scale_size, -1).repeat(1, scale_size).view(scale_size, scale_size, -1)\n","        self.anchor = torch.cat((cx, cy), 2)\n","\n","        self.local_layer = nn.Sequential()\n","\n","        self.local_layer.add_module('block_1',conv_block(1024,1024,3,False,2))\n","\n","        self.local_layer.add_module('block_2',conv_block(1024,1024,3,False,1))\n","\n","        self.local_layer.add_module('block_3',conv_block(1024,1024,3,False,1))\n","\n","        self.local_layer.add_module('block_4',conv_block(1024,1024,3,False,1))\n","\n","\n","        self.reg_layer = nn.Sequential()\n","\n","        self.reg_layer.add_module('local_layer', nn.Linear(1024*7*7, 4096))\n","        self.reg_layer.add_module('leaky_local', nn.LeakyReLU(0.1, inplace=True))\n","        self.reg_layer.add_module('dropout', nn.Dropout(0.5) )\n","        self.reg_layer.add_module('fc_1', nn.Linear(4096, (5*self.bbox_num+self.cls_num)*self.scale_size*self.scale_size ))\n","\n","    def forward(self,x):\n","        B = x.size(0)\n","        output = self.feature(x)\n","        output = self.local_layer(output)\n","\n","        output = output.view(output.data.size(0),-1)\n","\n","        output = self.reg_layer(output)\n","\n","        output = output.view(-1,self.bbox_num*5+self.cls_num,self.scale_size,self.scale_size)\n","\n","        output = output.permute(0,2,3,1).contiguous()\n","\n","        pred_cls = output[:, :, :, :self.cls_num]\n","        pred_bbox = torch.cat(\n","            [output[:, :, :, self.cls_num + 5*j:self.cls_num + 4 + 5*j ] for j in range(self.bbox_num)],\n","            -1)\n","        pred_response = torch.cat([output[:, :, :, self.cls_num + 4 + 5*j:self.cls_num + 4+ 5*j +1]\n","                                   for j in range(self.bbox_num)], -1)\n","        anchors = self.anchor.repeat((B, 1, 1, 1)).to(pred_bbox.device)\n","        pred_bbox[:,:,:,0:2] += anchors\n","\n","        return pred_cls,pred_response,pred_bbox\n","\n","\n","\n","def load_conv_bn(buf, start, conv_model, bn_model):\n","    num_w = conv_model.weight.numel()\n","\n","    num_b = bn_model.bias.numel()\n","    bn_model.bias.data.copy_(torch.from_numpy(buf[start:start+num_b]));     start = start + num_b\n","    bn_model.weight.data.copy_(torch.from_numpy(buf[start:start+num_b]));   start = start + num_b\n","    bn_model.running_mean.copy_(torch.from_numpy(buf[start:start+num_b]));  start = start + num_b\n","    bn_model.running_var.copy_(torch.from_numpy(buf[start:start+num_b]));   start = start + num_b\n","\n","    conv_weight = torch.from_numpy(buf[start:start+num_w])\n","    conv_model.weight.data.copy_(conv_weight.view_as(conv_model.weight)); start = start + num_w\n","    return start"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uE27LFne3XyM","executionInfo":{"status":"ok","timestamp":1733683480399,"user_tz":-60,"elapsed":2918,"user":{"displayName":"Alex Lin","userId":"04926661606102487292"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0c3973d2-dfee-46a0-9e3c-6bbf3ec3b311"},"source":[" # load pretrained model (Darknet-19) or unfinished trained model\n","if epochs_start == 1:\n","    net = YOLO(cls_num, bbox_num, box_scale, pretrained=pretrain_path)\n","else:\n","    net = YOLO(cls_num, bbox_num, box_scale)\n","\n","net.cuda()\n","net.train()\n","\n","\n","if epochs_start > 1:\n","    net.load_state_dict(torch.load(model_path + 'model_.pkl'))\n","\n","print(\"load model successfully\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Load pretrained models !\n","load model successfully\n"]}]},{"cell_type":"code","metadata":{"id":"1_kD7Vl56B3o"},"source":["#BBox encoder, decoder for the last layer (7*7*30) and Non-Maximal Suppression\n","\n","def yolo_box_encoder(bs):\n","\n","    bb_class = np.zeros((YOLO_cfg['ceils_size'], YOLO_cfg['ceils_size'], YOLO_cfg['class_num']))\n","    bb_response = np.zeros((YOLO_cfg['ceils_size'], YOLO_cfg['ceils_size'], YOLO_cfg['box_num']))\n","    bb_boxes = np.zeros((YOLO_cfg['ceils_size'], YOLO_cfg['ceils_size'], 4 * YOLO_cfg['box_num']))\n","\n","    for i in range(bs.shape[0]):\n","\n","        local_x = int( min(0.99,bs[i,0] + bs[i,2] / 2) * YOLO_cfg['ceils_size'])\n","        local_y = int( min(0.99,bs[i,1] + bs[i,3] / 2) * YOLO_cfg['ceils_size'])\n","\n","        for j in range(YOLO_cfg['box_num']):\n","            bb_response[local_y, local_x, j] = 1\n","\n","            bb_boxes[local_y, local_x, j * 4 + 0] = (bs[i,0] + bs[i,2] /2)\n","            bb_boxes[local_y, local_x, j * 4 + 1] = (bs[i,1] + bs[i,3] /2)\n","            bb_boxes[local_y, local_x, j * 4 + 2] = np.sqrt(bs[i,2])\n","            bb_boxes[local_y, local_x, j * 4 + 3] = np.sqrt(bs[i,3])\n","\n","        bb_class[local_y, local_x, int(bs[i,4])] = 1\n","\n","    bb_boxes = torch.from_numpy(bb_boxes).float()\n","    bb_class = torch.from_numpy(bb_class).float()\n","    bb_response = torch.from_numpy(bb_response).float()\n","    boxes = (bb_class,bb_response,bb_boxes)\n","\n","    return boxes\n","\n","def py_cpu_nms(dets, scores, thresh):\n","    # dets:(m,5)  thresh:scaler\n","    #print(scores.shape)\n","    temp_len = 0  # np.max(dets[:,2]) * 0.05\n","\n","    x1 = dets[:, 0]\n","    y1 = dets[:, 1]\n","    x2 = x1 + dets[:, 2]  # dets[:, 2]#\n","    y2 = y1 + dets[:, 3]  # dets[:, 3]#\n","\n","    areas = (y2 - y1 + temp_len) * (x2 - x1 + temp_len)\n","\n","    keep = []\n","\n","    index = scores.argsort()[::-1][:200]\n","\n","\n","    while index.size > 0:\n","        i = index[0]  # every time the first is the biggst, and add it directly\n","        keep.append(i)\n","\n","        x11 = np.maximum(x1[i], x1[index[1:]])  # calculate the points of overlap\n","        y11 = np.maximum(y1[i], y1[index[1:]])\n","        x22 = np.minimum(x2[i], x2[index[1:]])\n","        y22 = np.minimum(y2[i], y2[index[1:]])\n","\n","        w = np.maximum(0, x22 - x11 + temp_len)  # the weights of overlap\n","        h = np.maximum(0, y22 - y11 + temp_len)  # the height of overlap\n","\n","        overlaps = w * h\n","        #assert overlaps.all() >= 0\n","        ious = overlaps / (areas[i] + areas[index[1:]] - overlaps)\n","\n","        idx = np.where(ious <= thresh)[0]\n","        index = index[idx + 1]\n","\n","    return keep\n","\n","def yolo_box_decoder(pred,conf_thresh=0.01,nms_thresh=0.5):\n","    box_scale = YOLO_cfg['ceils_size']\n","    cls_num = YOLO_cfg['class_num']\n","    box_num = YOLO_cfg['box_num']\n","\n","    pred_cls, pred_response, pred_bboxes = pred\n","\n","    pred_cls = pred_cls.cpu()\n","    pred_response = pred_response.cpu()\n","    pred_bboxes = pred_bboxes.cpu()\n","\n","    prob = pred_response\n","    max_prob, max_prob_index = prob.max(3)\n","    boxes = []\n","    classes = []\n","\n","\n","    max_prob_index = max_prob_index.permute(1,2,0)\n","    for B in range(1):\n","        for cls in range(cls_num):\n","\n","            cls_prob = (pred_cls[B,:,:,cls]*max_prob[B, :, :]).data\n","\n","            mask_box = torch.zeros((box_scale,box_scale,box_num))\n","\n","            mask_box.scatter_(2,max_prob_index,1)\n","            mask_box = mask_box.unsqueeze(-1)\n","\n","            mask_box = mask_box.repeat(1,1,1,4).view(box_scale,box_scale,box_num*4)\n","            mask_box = mask_box.unsqueeze(0).byte()\n","            mask_box = mask_box.expand_as(pred_bboxes)\n","            bbox = pred_bboxes[mask_box].data\n","\n","            bbox = bbox.reshape(-1,4)\n","            cls_prob = cls_prob.reshape(-1,1)\n","\n","            a = cls_prob.gt(conf_thresh)\n","            mask_a = a.expand_as(bbox)\n","\n","            bbox = bbox[mask_a].reshape(-1,4)\n","            cls_prob = cls_prob[a].reshape(-1,1)\n","\n","            if bbox.shape[0] > 0:\n","                bbox[:,0:2] = bbox[:,0:2] - 0.5*torch.pow(bbox[:,2:4],2)\n","                bbox[:,2:4] = torch.pow(bbox[:,2:4],2)\n","\n","                pre_cls_box = bbox.data.numpy()\n","                pre_cls_score = cls_prob.data.view(-1).numpy()\n","\n","                keep = py_cpu_nms(pre_cls_box, pre_cls_score, thresh=nms_thresh)\n","                for conf_keep, loc_keep in zip(pre_cls_score[keep], pre_cls_box[keep]):\n","                    boxes.append(loc_keep)\n","                    classes.append([cls,conf_keep])\n","\n","    boxes = np.array(boxes)\n","    classes = np.array(classes)\n","\n","    return boxes,classes\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qu4Lz_7H5MOf"},"source":["# data loader and data augmentation\n","\n","from PIL import Image,ImageEnhance\n","from torch.utils import data\n","import random\n","\n","def distort_image(im, hue, sat, val):\n","    im = im.convert('HSV')\n","    cs = list(im.split())\n","    # cs[1] = cs[1].point(lambda i: i * sat)\n","    # cs[2] = cs[2].point(lambda i: i * val)\n","\n","    # def change_hue(x):\n","    #     x += hue*255\n","    #     if x > 255:\n","    #         x -= 255\n","    #     if x < 0:\n","    #         x += 255\n","    #     return x\n","    cs[1] = cs[1].point(lambda i: int(float(i) * sat))\n","    cs[2] = cs[2].point(lambda i: int(float(i) * val))\n","\n","    def change_hue(x):\n","        x += hue*float(255)\n","        if x > 255:\n","            x -= 255\n","        if x < 0:\n","            x += 255\n","        return int(x)\n","    cs[0] = cs[0].point(change_hue)\n","    im = Image.merge(im.mode, tuple(cs))\n","\n","    im = im.convert('RGB')\n","    return im\n","\n","def rand_scale(s):\n","    scale = random.uniform(1, s)\n","    if(random.randint(1,10000)%2):\n","        return scale\n","    return 1./scale\n","\n","def random_distort_image(im, hue, saturation, exposure):\n","    dhue = random.uniform(-hue, hue)\n","    dsat = rand_scale(saturation)\n","    dexp = rand_scale(exposure)\n","    res = distort_image(im, dhue, dsat, dexp)\n","    return res\n","\n","\n","def data_augmentation(img, shape, jitter, hue, saturation, exposure):\n","    oh = img.height\n","    ow = img.width\n","\n","    dw =int(ow*jitter)\n","    dh =int(oh*jitter)\n","\n","    pleft  = random.randint(-dw, dw)\n","    pright = random.randint(-dw, dw)\n","    ptop   = random.randint(-dh, dh)\n","    pbot   = random.randint(-dh,dh)\n","\n","\n","    swidth =  ow - pleft - pright\n","    sheight = oh - ptop - pbot\n","\n","\n","    sx = float(swidth)  / ow\n","    sy = float(sheight) / oh\n","\n","    flip = random.randint(1,10000)%2\n","\n","    cropped = img.crop( (pleft, ptop, pleft + swidth - 1, ptop + sheight - 1))\n","\n","    dx = (float(pleft)/ow)/sx\n","    dy = (float(ptop) /oh)/sy\n","\n","\n","    sized = cropped.resize(shape,Image.NEAREST)\n","    if flip:\n","        sized = sized.transpose(Image.FLIP_LEFT_RIGHT)\n","    img = random_distort_image(sized, hue, saturation, exposure)\n","\n","    return img, flip, dx,dy,sx,sy\n","\n","def fill_truth_detection(bs, flip, dx, dy, sx, sy):\n","\n","    new_bs = []\n","    #print(bs)\n","    for i in range(bs.shape[0]):\n","        x1 = bs[i][0]\n","        y1 = bs[i][1]\n","        x2 = bs[i][0] + bs[i][2]\n","        y2 = bs[i][1] + bs[i][3]\n","\n","        x1 = min(0.99, max(0, x1 * sx - dx))\n","        y1 = min(0.99, max(0, y1 * sy - dy))\n","\n","        x2 = max(0, min(0.999, x2 * sx - dx))\n","        y2 = max(0, min(0.999, y2 * sy - dy))\n","\n","\n","        bs[i][0] = x1\n","        bs[i][1] = y1\n","        bs[i][2] = x2 - x1\n","        bs[i][3] = y2 - y1\n","        bs[i][4] = bs[i][4]\n","        if flip:\n","            bs[i][0] =  1 - bs[i][0] - bs[i][2]\n","\n","        if bs[i][2] > 0 and bs[i][3] > 0:\n","            new_bs.append([bs[i]])\n","\n","    new_bs = np.array(new_bs)\n","    new_bs = np.reshape(new_bs, (-1, 5))\n","\n","    return new_bs\n","\n","\n","def norm_bb(b,size):\n","    x = b[:, 0:1]\n","    y = b[:, 1:2]\n","\n","    dw = 1. / size[0]\n","    dh = 1. / size[1]\n","\n","    x = (x * dw).clip(0.01, 0.99)\n","    y = (y * dh).clip(0.01, 0.99)\n","    w = ((b[:, 2:3] - b[:, 0:1]) * dw).clip(0.01, 0.99)\n","    h = ((b[:, 3:4] - b[:, 1:2]) * dh).clip(0.01, 0.99)\n","\n","    return np.concatenate((x, y, w, h, b[:, 4:5]), axis=1)\n","\n","def load_data_detection(imgpath,labpath ,shape, aug = True, jitter=0.2, hue=0.1, saturation=1.5, exposure=1.5):\n","\n","    #print('---imgpath={}'.format(imgpath))\n","    img = Image.open(imgpath).convert('RGB')\n","\n","    bs = np.loadtxt(labpath,delimiter=',')\n","    bs = np.reshape(bs, (-1, 5))\n","\n","    bs = norm_bb(bs,(img.width,img.height))\n","\n","    # data augmentation is applied only in training phase\n","    if aug:\n","        img, flip, dx, dy, sx, sy = data_augmentation(img, shape, jitter, hue, saturation, exposure)\n","    else:\n","        flip, dx, dy, sx, sy = False, 0, 0, 1, 1\n","\n","    #print(dx, dy, sx, sy)\n","    label = fill_truth_detection(bs, flip, dx, dy, 1./sx, 1./sy)\n","\n","    return img,label\n","\n","\n","\n","class VOCDatasets(data.Dataset):\n","    def __init__(self, transform, list_file, VOC_root_dir, box_encoder = None, train=False):\n","\n","        self.transform = transform\n","        self.train = train\n","        self.label_path = []\n","        self.image_path = []\n","        self.box_encoder = box_encoder\n","        with open(list_file) as f:\n","            lines = f.readlines()\n","\n","        self.num_samples = len(lines)\n","\n","        for line in lines:\n","            # using \"__\" instead of \"__\" because the data path under Google drive is all \"/content/drive/My Drive/...\n","            # Therefore, the following .split(' ') function would result in error\n","            # splited = line.strip().split(' ')\n","            splited = line.strip().split('__')\n","            #print('-----VOC_root_dir={}'.format(VOC_root_dir))\n","            #print('-----splited={}'.format(splited))\n","            self.image_path.append(VOC_root_dir + splited[0])\n","            self.label_path.append(VOC_root_dir + splited[1])\n","\n","    def __getitem__(self, idx):\n","\n","        file_name = self.image_path[idx]\n","        gt_path = self.label_path[idx]\n","\n","        #img,bbox = data_augment(file_name,gt_path,self.train)\n","        #print('--in __getitem__, file_name={}'.format(file_name))\n","        img, bbox = load_data_detection(file_name, gt_path, [448, 448], self.train)\n","        #maximum bbox=50\n","\n","        if self.box_encoder is not None:\n","            gt = self.box_encoder(bbox)\n","        else:\n","            gt = np.zeros((50, 5), dtype=np.float32)\n","            gt[:len(bbox), :] = bbox\n","            gt = torch.from_numpy(gt).float()\n","\n","        img = self.transform(img)*255\n","\n","        return img,gt\n","\n","    def __len__(self):\n","        return self.num_samples\n","\n","# remember that the following tansform would only accept PIL images as input\n","transform = transforms.Compose([\n","    transforms.Resize([448, 448]),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.485, 0.456, 0.406], [1, 1, 1])\n","])\n","\n","\n","dataset = VOCDatasets(transform, train_image_list, VOC_root_dir, yolo_box_encoder, train=True) # train=true will apply data augmentation\n","\n","train_loader = data.DataLoader(dataset=dataset,\n","                              batch_size=batch_size,\n","                              shuffle=True,\n","                              num_workers=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E-o5ecHsNP9-"},"source":["# YOLO loss\n","\n","import torch\n","import torch.nn.functional as F\n","import torch.nn as nn\n","from torch.autograd import Variable\n","\n","class yolov1_loss(nn.Module):\n","    def __init__(self, B, l_coord, l_noobj,device='cuda' ,cls_num=20):\n","        super(yolov1_loss, self).__init__()\n","        self.B = B # bbox_num\n","        self.l_coord = l_coord\n","        self.l_noobj = l_noobj\n","        self.class_num = cls_num\n","        self.device = device\n","\n","    def compute_iou(self, box1, box2):\n","        '''Compute the intersection over union of two set of boxes, each box is [x1,y1,x2,y2].\n","        Args:\n","          box1: (tensor) bounding boxes, sized [N,4].\n","          box2: (tensor) bounding boxes, sized [M,4].\n","        Return:\n","          (tensor) iou, sized [N,M].\n","        '''\n","\n","        lt = torch.max(\n","            box1[:, :2],  # [N,2] -> [N,1,2] -> [N,M,2]\n","            box2[:, :2],  # [M,2] -> [1,M,2] -> [N,M,2]\n","        )\n","\n","        rb = torch.min(\n","            box1[:, 2:],  # [N,2] -> [N,1,2] -> [N,M,2]\n","            box2[:, 2:],  # [M,2] -> [1,M,2] -> [N,M,2]\n","        )\n","\n","        wh = rb - lt  # [N,M,2]\n","        wh[wh < 0] = 0  # clip at 0\n","        inter = wh[:, 0] * wh[:, 1]  # [N,M]\n","\n","        area1 = (box1[:, 2] - box1[:, 0]) * (box1[:, 3] - box1[:, 1])  # [N,]\n","        area2 = (box2[:, 2] - box2[:, 0]) * (box2[:, 3] - box2[:, 1])  # [M,]\n","\n","        iou = inter / (area1 + area2 - inter)\n","        return iou\n","\n","    def forward(self,pred,target):\n","        #print(target)\n","        pred_cls, pred_response, pred_bboxes = pred\n","        label_cls, label_response, label_bboxes = target\n","\n","\n","        pred_cls = pred_cls.to(self.device)\n","        pred_response =  pred_response.to(self.device)\n","        pred_bboxes = pred_bboxes.to(self.device)\n","\n","        label_cls = label_cls.to(self.device)\n","        label_response =  label_response.to(self.device)\n","        label_bboxes = label_bboxes.to(self.device)\n","\n","\n","        batch_size = pred_response.size(0)\n","\n","        no_obj_mask = (label_response[:, :, :, 0] < 1).unsqueeze(-1).expand_as(label_response)\n","\n","        obj_response_mask = (label_response[:, :, :, 0] > 0).unsqueeze(-1).expand_as(label_response)\n","\n","        obj_box_mask = (label_response[:, :, :, 0] > 0).unsqueeze(-1).expand_as(label_bboxes)\n","\n","        obj_cls_mask = (label_response[:, :, :, 0] > 0).unsqueeze(-1).expand_as(label_cls)\n","\n","        no_obj_contain_pred = pred_response[no_obj_mask].view(-1)\n","        no_obj_contain_target = label_response[no_obj_mask].view(-1)\n","\n","\n","        obj_contain_pred = pred_response[obj_response_mask].view(-1, self.B)\n","\n","        obj_contain_target = label_response[obj_response_mask].view(-1, self.B)\n","\n","        # class pred response\n","        obj_class_pred = pred_cls[obj_cls_mask].view(-1, self.class_num)\n","        obj_class_target = label_cls[obj_cls_mask].view(-1, self.class_num)\n","\n","        # box pred response\n","        obj_loc_pred = pred_bboxes[obj_box_mask].view(-1, self.B * 4)\n","        obj_loc_target = label_bboxes[obj_box_mask].view(-1, self.B * 4)\n","\n","        iou = torch.zeros(obj_loc_pred.size(0), self.B)\n","        iou = Variable(iou)\n","\n","        for j in range(self.B):\n","            pred_bb = torch.zeros(obj_loc_pred.size(0), 4)\n","            pred_bb = Variable(pred_bb)\n","\n","            target_bb = torch.zeros(obj_loc_pred.size(0), 4)\n","            target_bb = Variable(target_bb)\n","\n","            target_bb[:, 0] = obj_loc_target[:, j * 4] - 0.5 * pow(obj_loc_target[:, j * 4 + 2], 2)\n","            target_bb[:, 1] = obj_loc_target[:, j * 4 + 1] - 0.5 * pow(obj_loc_target[:, j * 4 + 3], 2)\n","            target_bb[:, 2] = obj_loc_target[:, j * 4] + 0.5 * pow(obj_loc_target[:, j * 4 + 2], 2)\n","            target_bb[:, 3] = obj_loc_target[:, j * 4 + 1] + 0.5 * pow(obj_loc_target[:, j * 4 + 3], 2)\n","\n","            pred_bb[:, 0] = obj_loc_pred[:, j * 4] - 0.5 * pow(obj_loc_pred[:, j * 4 + 2], 2)\n","            pred_bb[:, 1] = obj_loc_pred[:, j * 4 + 1] - 0.5 * pow(obj_loc_pred[:, j * 4 + 3], 2)\n","            pred_bb[:, 2] = obj_loc_pred[:, j * 4] + 0.5 * pow(obj_loc_pred[:, j * 4 + 2], 2)\n","            pred_bb[:, 3] = obj_loc_pred[:, j * 4 + 1] + 0.5 * pow(obj_loc_pred[:, j * 4 + 3], 2)\n","\n","            iou[:, j] = self.compute_iou(target_bb, pred_bb)\n","\n","        max_iou, max_index = iou.max(1)\n","        min_iou, _ = iou.min(1)\n","        max_index = max_index.data.cpu()\n","\n","        coo_response_mask = torch.ByteTensor(obj_loc_pred.size(0), self.B * 4).to(self.device)\n","\n","        coo_response_mask.zero_()\n","        for i in range(obj_loc_pred.size(0)):\n","            coo_response_mask[i, max_index[i] * 4:max_index[i] * 4 + 4] = 1\n","\n","        obj_axis_pred = obj_loc_pred[coo_response_mask].view(-1, 4)\n","        obj_axis_target = obj_loc_target[coo_response_mask].view(-1, 4)\n","\n","        iou_response_mask = coo_response_mask[:, [i * 4 for i in range(self.B)]]\n","\n","        obj_response_pred = obj_contain_pred[iou_response_mask].view(-1)\n","        obj_response_target = obj_contain_target[iou_response_mask].view(-1)\n","\n","        obj_local_loss = F.mse_loss(obj_axis_pred[:, 0:2], obj_axis_target[:, 0:2], size_average=False) + \\\n","                         F.mse_loss(obj_axis_pred[:, 2:4], obj_axis_target[:, 2:4], size_average=False)\n","        obj_class_loss = F.mse_loss(obj_class_pred, obj_class_target, size_average=False)\n","\n","\n","        max_iou = (max_iou.data).to(self.device)\n","        conf_id = ((1 - max_iou) * self.l_noobj + max_iou).to(self.device)\n","\n","        conf_id = Variable(conf_id, requires_grad=True)\n","\n","        obj_contain_loss = F.mse_loss(obj_response_pred, max_iou, size_average=False)\n","\n","        no_obj_contain_loss = F.mse_loss(no_obj_contain_pred, no_obj_contain_target, size_average=False)\n","\n","        iou_loss = F.mse_loss(max_iou, obj_response_target, size_average=False)\n","\n","        loss_all = (self.l_coord * obj_local_loss + obj_class_loss + obj_contain_loss + self.l_noobj * no_obj_contain_loss + iou_loss) / batch_size\n","\n","        loss_info = {\n","            'local_loss': self.l_coord * obj_local_loss.data,\n","            'class_loss': obj_class_loss.data,\n","            'contain_loss': obj_contain_loss.data,\n","            'no_contain_loss': self.l_noobj * no_obj_contain_loss,\n","            'iou_loss': iou_loss,\n","            'mean_iou': torch.mean(max_iou)\n","        }\n","\n","        return loss_all, loss_info"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hcTTOirfN_st"},"source":["# optimizer and loss\n","\n","optimizer = optim.SGD(net.parameters(), lr=lr, momentum=0.9, weight_decay=5e-4)\n","\n","device='cuda'\n","\n","loss_detect = yolov1_loss(bbox_num, l_coord, l_noobj, device, cls_num)\n","\n","# do remind the difference between step & epoch\n","step = epochs_start * len(train_loader)\n","\n","best_score = 0\n","eval_score = 0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y_qgV19UOtQ6"},"source":["# mAP estimation\n","\n","\n","import xml.etree.ElementTree as ET\n","import os\n","import pickle\n","import numpy as np\n","import cv2\n","\n","\n","def parse_rec(filename):\n","    \"\"\" Parse a PASCAL VOC xml file \"\"\"\n","    tree = ET.parse(filename)\n","    objects = []\n","    for obj in tree.findall('object'):\n","        obj_struct = {}\n","        obj_struct['name'] = obj.find('name').text\n","        obj_struct['pose'] = obj.find('pose').text\n","        obj_struct['truncated'] = int(obj.find('truncated').text)\n","        obj_struct['difficult'] = int(obj.find('difficult').text)\n","        bbox = obj.find('bndbox')\n","        obj_struct['bbox'] = [int(bbox.find('xmin').text),\n","                              int(bbox.find('ymin').text),\n","                              int(bbox.find('xmax').text),\n","                              int(bbox.find('ymax').text)]\n","        objects.append(obj_struct)\n","\n","    return objects\n","\n","\n","def voc_ap(rec, prec, use_07_metric=False):\n","    \"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n","    Compute VOC AP given precision and recall.\n","    If use_07_metric is true, uses the\n","    VOC 07 11 point method (default:False).\n","    \"\"\"\n","    if use_07_metric:\n","        # 11 point metric\n","        ap = 0.\n","        for t in np.arange(0., 1.1, 0.1):\n","            if np.sum(rec >= t) == 0:\n","                p = 0\n","            else:\n","                p = np.max(prec[rec >= t])\n","            ap = ap + p / 11.\n","    else:\n","        # correct AP calculation\n","        # first append sentinel values at the end\n","        mrec = np.concatenate(([0.], rec, [1.]))\n","        mpre = np.concatenate(([0.], prec, [0.]))\n","\n","        # compute the precision envelope\n","        for i in range(mpre.size - 1, 0, -1):\n","            mpre[i - 1] = np.maximum(mpre[i - 1], mpre[i])\n","\n","        # to calculate area under PR curve, look for points\n","        # where X axis (recall) changes value\n","        i = np.where(mrec[1:] != mrec[:-1])[0]\n","\n","        # and sum (\\Delta recall) * prec\n","        ap = np.sum((mrec[i + 1] - mrec[i]) * mpre[i + 1])\n","    return ap\n","\n","\n","def voc_eval(detpath,\n","             annopath,\n","             imagesetfile,\n","             classname,\n","             cachedir,\n","             ovthresh=0.5,\n","             use_07_metric=False):\n","    \"\"\"rec, prec, ap = voc_eval(detpath,\n","                                annopath,\n","                                imagesetfile,\n","                                classname,\n","                                [ovthresh],\n","                                [use_07_metric])\n","\n","    Top level function that does the PASCAL VOC evaluation.\n","\n","    detpath: Path to detections\n","        detpath.format(classname) should produce the detection results file.\n","    annopath: Path to annotations\n","        annopath.format(imagename) should be the xml annotations file.\n","    imagesetfile: Text file containing the list of images, one image per line.\n","    classname: Category name (duh)\n","    cachedir: Directory for caching the annotations\n","    [ovthresh]: Overlap threshold (default = 0.5)\n","    [use_07_metric]: Whether to use VOC07's 11 point AP computation\n","        (default False)\n","    \"\"\"\n","    # assumes detections are in detpath.format(classname)\n","    # assumes annotations are in annopath.format(imagename)\n","    # assumes imagesetfile is a text file with each line an image name\n","    # cachedir caches the annotations in a pickle file\n","\n","    # first load gt\n","    if not os.path.isdir(cachedir):\n","        os.mkdir(cachedir)\n","    cachefile = os.path.join(cachedir, 'annots.pkl')\n","    # read list of images\n","    with open(imagesetfile, 'r') as f:\n","        lines = f.readlines()\n","    imagenames = [x.strip() for x in lines]\n","\n","    #print('------------imagenames={}'.format(imagenames))\n","\n","    if not os.path.isfile(cachefile):\n","        # load annots\n","        recs = {}\n","        for i, imagename in enumerate(imagenames):\n","            recs[imagename] = parse_rec(annopath.format(imagename))\n","            if i % 100 == 0:\n","                print('Reading annotation for {:d}/{:d}'.format(\n","                    i + 1, len(imagenames)))\n","        # save\n","        print('Saving cached annotations to {:s}'.format(cachefile))\n","        with open(cachefile, 'wb') as f:\n","            pickle.dump(recs, f)\n","    else:\n","        # load\n","        with open(cachefile, 'rb') as f:\n","            recs = pickle.load(f)\n","\n","    # extract gt objects for this class\n","    class_recs = {}\n","    npos = 0\n","    for imagename in imagenames:\n","        R = [obj for obj in recs[imagename] if obj['name'] == classname]\n","        bbox = np.array([x['bbox'] for x in R])\n","        difficult = np.array([x['difficult'] for x in R]).astype(np.bool)\n","        det = [False] * len(R)\n","        npos = npos + sum(~difficult)\n","        class_recs[imagename] = {'bbox': bbox,\n","                                 'difficult': difficult,\n","                                 'det': det}\n","\n","    # read dets\n","    detfile = detpath.format(classname)\n","    with open(detfile, 'r') as f:\n","        lines = f.readlines()\n","\n","    # using \"__\" instead of \" \" because the data path under Google drive is all \"/content/drive/My Drive/...\n","    # Therefore, the following .split(' ') function would result in error\n","    #splitlines = [x.strip().split('__') for x in lines]\n","    splitlines = [x.strip().split(' ') for x in lines]\n","    image_ids = [x[0] for x in splitlines]\n","    confidence = np.array([float(x[1]) for x in splitlines])\n","    BB = np.array([[float(z) for z in x[2:]] for x in splitlines])\n","\n","    # sort by confidence\n","    sorted_ind = np.argsort(-confidence)\n","    sorted_scores = np.sort(-confidence)\n","    BB = BB[sorted_ind, :]\n","    image_ids = [image_ids[x] for x in sorted_ind]\n","\n","    # go down dets and mark TPs and FPs\n","    nd = len(image_ids)\n","    tp = np.zeros(nd)\n","    fp = np.zeros(nd)\n","    for d in range(nd):\n","        R = class_recs[image_ids[d]]\n","        bb = BB[d, :].astype(float)\n","        ovmax = -np.inf\n","        BBGT = R['bbox'].astype(float)\n","\n","        if BBGT.size > 0:\n","            # compute overlaps\n","            # intersection\n","            ixmin = np.maximum(BBGT[:, 0], bb[0])\n","            iymin = np.maximum(BBGT[:, 1], bb[1])\n","            ixmax = np.minimum(BBGT[:, 2], bb[2])\n","            iymax = np.minimum(BBGT[:, 3], bb[3])\n","            iw = np.maximum(ixmax - ixmin + 1., 0.)\n","            ih = np.maximum(iymax - iymin + 1., 0.)\n","            inters = iw * ih\n","\n","            # union\n","            uni = ((bb[2] - bb[0] + 1.) * (bb[3] - bb[1] + 1.) +\n","                   (BBGT[:, 2] - BBGT[:, 0] + 1.) *\n","                   (BBGT[:, 3] - BBGT[:, 1] + 1.) - inters)\n","\n","            overlaps = inters / uni\n","            ovmax = np.max(overlaps)\n","            jmax = np.argmax(overlaps)\n","\n","        if ovmax > ovthresh:\n","            if not R['difficult'][jmax]:\n","                if not R['det'][jmax]:\n","                    tp[d] = 1.\n","                    R['det'][jmax] = 1\n","                else:\n","                    fp[d] = 1.\n","        else:\n","            fp[d] = 1.\n","\n","    # compute precision recall\n","    fp = np.cumsum(fp)\n","    tp = np.cumsum(tp)\n","    rec = tp / float(npos)\n","    # avoid divide by zero in case the first detection matches a difficult\n","    # ground truth\n","    prec = tp / np.maximum(tp + fp, np.finfo(np.float64).eps)\n","    ap = voc_ap(rec, prec, use_07_metric)\n","\n","    return rec, prec, ap\n","\n","def _do_python_eval_quite(res_prefix,_devkit_path ,output_dir=''):\n","    # do remind only PAScal VOC 07 test needs to use use_07_metric ==  True\n","    # simply replace 2007 with year bigger than 2010 will work\n","    _year = '2007'\n","#    _classes = ('__background__',  # always index 0\n","#                'aeroplane', 'bicycle', 'bird', 'boat',\n","#                'bottle', 'bus', 'car', 'cat', 'chair',\n","#                'cow', 'diningtable', 'dog', 'horse',\n","#                'motorbike', 'person', 'pottedplant',\n","#                'sheep', 'sofa', 'train', 'tvmonitor')\n","    _classes = ('__background__',  # always index 0\n","                'without_mask', 'with_mask', 'mask_weared_incorrect')\n","\n","    filename = res_prefix + '{:s}.txt'\n","    # annopath indicates where xml files are\n","    annopath = os.path.join(\n","        _devkit_path,\n","        #'VOC' + _year,\n","        'annotations',\n","        '{:s}.xml')\n","    # imagesetfile indicates where test.txt (testing list) is\n","    imagesetfile = os.path.join(\n","        _devkit_path,\n","        #'VOC' + _year,\n","        #'ImageSets',\n","        #'Main',\n","        'mAP_test_list.txt') # test.txt\n","    # cachedir = os.path.join(_devkit_path, 'annotations_cache') # revised by Alex\n","    # cachedir indicates where annots.pkl is!\n","    cachedir = GT_temp_folder\n","    aps = []\n","\n","    result = dict()\n","    # The PASCAL VOC metric changed in 2010\n","    use_07_metric = True if int(_year) < 2010 else False\n","    # print('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))\n","    if not os.path.isdir(output_dir):\n","        os.mkdir(output_dir)\n","\n","    print(\"Begin to perform mAP estimation\")\n","    for i, cls in enumerate(_classes):\n","        if cls == '__background__':\n","            continue\n","\n","        rec, prec, ap = voc_eval(\n","            filename, annopath, imagesetfile, cls, cachedir, ovthresh=0.5,\n","            use_07_metric=use_07_metric)\n","        aps += [ap]\n","        # print('AP for {} = {:.4f}'.format(cls, ap))\n","        result[cls] = ap\n","        # the following file (rec, prec, & ap of each class) is only for back-up.\n","        with open(os.path.join(output_dir, cls + '_pr.pkl'), 'wb') as f:\n","            pickle.dump({'rec': rec, 'prec': prec, 'ap': ap}, f)\n","\n","    return result\n","\n","\n","def test_result(model, prefix, VOC_root_dir, outfile, test_list):\n","    class_num = cls_num\n","    #list_file = 'VOC2007_test.txt'\n","\n","    dataset = VOCDatasets(transform,test_list, VOC_root_dir, None, False)\n","\n","    test_loader = data.DataLoader(dataset=dataset,\n","                                  batch_size=1,\n","                                  shuffle=False,\n","                                  num_workers=4)\n","\n","    test_loader = tqdm(test_loader)\n","\n","    #list_file = test_list\n","    lines = []\n","    with open(test_list) as f:\n","        lines = f.readlines()\n","\n","    fps = [0] * class_num\n","    if not os.path.exists(outfile):\n","        os.mkdir(outfile)\n","    for i in range(class_num):\n","        buf = '%s/%s%s.txt' % (prefix, outfile, classes[i])\n","        fps[i] = open(buf, 'w')\n","\n","    # do remember that label (of testing data) is not used in the following for-loop\n","    # the detection results stored in txt files will be evaluated in _do_python_eval_quite() by reading xml files.\n","    for lineId, (images, label) in enumerate(test_loader):\n","        t1 = time.time()\n","        #img = cv2.imread(lines[lineId].split(\" \")[0])\n","        img = cv2.imread(VOC_root_dir + lines[lineId].split(\"__\")[0])\n","        width, height = img.shape[1], img.shape[0]\n","\n","        images = images.cuda()\n","\n","        t2 = time.time()\n","        #print(\"load times: \",t2-t1)\n","\n","        t1 = time.time()\n","        pred = model(images)\n","        t2 = time.time()\n","        #print(\"pred times: \",t2-t1)\n","\n","        t1 = time.time()\n","        pred_boxes,pred_conf = yolo_box_decoder(pred)\n","        t2 = time.time()\n","        #print(\"decoder times: \",t2-t1)\n","\n","        fileId = os.path.basename(lines[lineId]).split('.')[0]\n","\n","        for j in range(len(pred_boxes)):\n","\n","            x1 = pred_boxes[j,0]\n","            y1 = pred_boxes[j,1]\n","            x2 = x1 + pred_boxes[j,2]\n","            y2 = y1 + pred_boxes[j,3]\n","\n","            x1,x2 = x1*width,x2*width\n","            y1,y2 = y1*height,y2*height\n","\n","            cls_id = int(pred_conf[j,0])\n","            scores = pred_conf[j,1]\n","            #print(scores)\n","            fps[cls_id].write('%s %.3f %.1f %.1f %.1f %.1f\\n' %\n","                              (fileId, scores, x1 + 1, y1 + 1, x2 + 1, y2 + 1))\n","\n","            ## uncomment the following section to produce detection results of the current epoch\n","            '''\n","            if scores > 0.2:\n","                cv2.rectangle(img,(int(x1),int(y1)-20),(int(x2),int(y1)),(125,125,125),-1)\n","                img = cv2.putText(img, classes[cls_id] + ': %.2f' % round(scores,3), (int(x1),int(y1)),  cv2.FONT_HERSHEY_PLAIN, 1.5, (0,0,0), thickness=1)\n","                #img = cv2.putText(img, str(round(scores,3)), (int(x1),int(y1)+20),  cv2.FONT_HERSHEY_PLAIN, 2.0, (0,0,0), thickness=1)\n","                img = cv2.rectangle(img, (int(x1),int(y1)), (int(x2),int(y2)), (0, 255, 0), 2)\n","                filename = lines[lineId].split(\" \")[0]\n","                filename_only = filename.split(\"/\")[-1]\n","                cv2.imwrite('/content/drive/My Drive/YOLO_data_model/voc07_det_results/' + filename_only, img)\n","            '''\n","\n","    for i in range(class_num):\n","        fps[i].close()\n","\n","    return\n","\n","def eval_mAp(model, prefix, VOC_root_dir, outfile, test_list):\n","    # prefix = /content/drive/My Drive/YOLO_data_model/detection_temp_folder\n","    # outfile = VOC\n","    # res_prefix is result temp folder\n","    res_prefix = prefix + '/' + outfile # /content/drive/My Drive/YOLO_data_model/detection_temp_folder/VOC and the detection file will be VOCCar.txt, VOCTruck.txt etc,.\n","    # test_list = \"/content/drive/My Drive/YOLO_data_model/VOC2007_test_toy_example.txt\"\n","    # perform inference for every test file\n","    test_result(model, prefix, VOC_root_dir, outfile, test_list)\n","    # output_dir is the folder to put GT pkl files and GT_temp_folder = /content/drive/My Drive/YOLO_data_model/GT_temp_folder\n","    # VOC_root_dir = \"/content/drive/My Drive/YOLO_data_model/VOCdevkit\"\n","    result = _do_python_eval_quite(res_prefix, VOC_root_dir ,output_dir = GT_temp_folder)\n","\n","    return result"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"78v6e7FpQY-B","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"1d951d95-1b9a-4567-eb2a-7be116a3e614","executionInfo":{"status":"error","timestamp":1733683485724,"user_tz":-60,"elapsed":5337,"user":{"displayName":"Alex Lin","userId":"04926661606102487292"}}},"source":["## training codes:\n","\n","best_score = 0\n","eval_score = 0\n","\n","\n","for epoch in range(epochs_start, epochs_end):\n","    epoch_loss = 0\n","    train_iterator = tqdm(train_loader, ncols=30)\n","    mulit_batch_ = 0\n","    #print(\"epoch={}\".format(epoch))\n","    if epoch == 0:\n","        learning_rate = lr/10\n","    elif epoch >= 1 and epoch <=5:\n","        learning_rate = 0.2e-3/10\n","    elif epoch <= 10:\n","        learning_rate = 0.2e-3/10\n","    elif epoch <= 30:\n","        learning_rate= 0.0001/10\n","    elif epoch <= 40:\n","        learning_rate=0.00001\n","    else:\n","        learning_rate=0.00001\n","\n","    for param_group in optimizer.param_groups:\n","        param_group['lr'] = learning_rate\n","\n","    for train_batch, (images, target) in enumerate(train_iterator):\n","        print('--------------------------train_batch={}'.format(train_batch))\n","\n","        images = images.cuda()\n","\n","        pred = net(images)\n","\n","        loss_xx, loss_info = loss_detect(pred, target)\n","\n","        assert not np.isnan\\\n","            (loss_xx.data.cpu().numpy())\n","\n","        epoch_loss += loss_xx\n","\n","        status = '[{0}] lr = {1} batch_loss = {2:.3f} epoch_loss = {3:.3f} '.format(\n","            epoch, learning_rate, loss_xx.data, epoch_loss.data / (train_batch + 1))\n","\n","\n","\n","        train_iterator.set_description(status)\n","\n","        loss_xx.backward()\n","\n","        optimizer.step()\n","        optimizer.zero_grad()\n","        step += 1\n","\n","    if epoch % 3 == 0: # and epoch > 30:\n","        print(\"Evaluate~~~~~   \")\n","        net.eval()\n","        result = eval_mAp(net, detection_result_txt_folder, VOC_root_dir, 'voc', eval_image_list)\n","        eval_score = np.mean(list(result.values()))\n","\n","        net.train()\n","\n","        if best_score < eval_score:\n","            best_score = eval_score\n","            torch.save(net.state_dict(), model_path + \"best_.pkl\")\n","        mAP_string = \"mean ap : {:.3f} , best ap: {:.3f}\".format(eval_score, best_score)\n","        print(mAP_string)\n","\n","        with open(savelog_filename, 'a') as f:\n","            print('%s %s' % (time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()), mAP_string), file=f)\n","\n","    torch.save(net.state_dict(), model_path + \"model_.pkl\")\n","\n","print(best_score)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|  | 0/57 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["-----bs[i,0] + bs[i,2] / 2=0.9264705882352942\n","-----bs[i,1] + bs[i,3] / 2=0.6520000000000001\n","-----bs[i,0] + bs[i,2] / 2=0.8823529411764707\n","-----bs[i,1] + bs[i,3] / 2=0.28600000000000003\n","-----bs[i,0] + bs[i,2] / 2=0.6588235294117647\n","-----bs[i,1] + bs[i,3] / 2=0.33199999999999996\n","-----bs[i,0] + bs[i,2] / 2=0.8264705882352941\n","-----bs[i,0] + bs[i,2] / 2=0.7597864768683273-----bs[i,1] + bs[i,3] / 2=0.12800000000000003\n","\n","-----bs[i,1] + bs[i,3] / 2=0.6838235294117647-----bs[i,0] + bs[i,2] / 2=0.4102941176470587\n","\n","-----bs[i,0] + bs[i,2] / 2=0.34163701067615654-----bs[i,1] + bs[i,3] / 2=0.4800000000000001\n","-----bs[i,1] + bs[i,3] / 2=0.3700980392156863\n","\n","-----bs[i,0] + bs[i,2] / 2=0.2735294117647059\n","-----bs[i,0] + bs[i,2] / 2=0.12455516014234858-----bs[i,1] + bs[i,3] / 2=0.059999999999999984\n","\n","-----bs[i,0] + bs[i,2] / 2=0.04314705882352943-----bs[i,1] + bs[i,3] / 2=0.6470588235294118\n","\n","-----bs[i,1] + bs[i,3] / 2=0.06600000000000002\n","-----bs[i,0] + bs[i,2] / 2=0.005500000000000005-----bs[i,0] + bs[i,2] / 2=0.056382352941176495\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5098039215686274-----bs[i,1] + bs[i,3] / 2=0.52\n","\n","-----bs[i,0] + bs[i,2] / 2=0.0634920634920635-----bs[i,0] + bs[i,2] / 2=0.005605381165919285\n","\n","-----bs[i,1] + bs[i,3] / 2=0.7923875432525953-----bs[i,1] + bs[i,3] / 2=0.5609756097560976\n","\n","-----bs[i,0] + bs[i,2] / 2=0.20634920634920634\n","-----bs[i,1] + bs[i,3] / 2=0.5579268292682927-----bs[i,0] + bs[i,2] / 2=0.05044843049327355\n","\n","-----bs[i,0] + bs[i,2] / 2=0.5142857142857142\n","-----bs[i,1] + bs[i,3] / 2=0.8010380622837372\n","-----bs[i,1] + bs[i,3] / 2=0.5396341463414636\n","-----bs[i,0] + bs[i,2] / 2=0.11995515695067266-----bs[i,0] + bs[i,2] / 2=0.784126984126984\n","\n","-----bs[i,1] + bs[i,3] / 2=0.7716262975778547\n","-----bs[i,0] + bs[i,2] / 2=0.19730941704035876\n","-----bs[i,1] + bs[i,3] / 2=0.5670731707317074\n","-----bs[i,1] + bs[i,3] / 2=0.823529411764706\n","-----bs[i,0] + bs[i,2] / 2=0.25560538116591935-----bs[i,0] + bs[i,2] / 2=0.8809523809523807\n","-----bs[i,1] + bs[i,3] / 2=0.541158536585366\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9944999999999999-----bs[i,1] + bs[i,3] / 2=0.6505190311418686\n","\n","-----bs[i,0] + bs[i,2] / 2=0.28026905829596416-----bs[i,1] + bs[i,3] / 2=0.49237804878048785\n","-----bs[i,1] + bs[i,3] / 2=0.666089965397924\n","\n","-----bs[i,0] + bs[i,2] / 2=0.3183856502242153\n","-----bs[i,1] + bs[i,3] / 2=0.6782006920415224\n","-----bs[i,0] + bs[i,2] / 2=0.2948430493273542\n","-----bs[i,1] + bs[i,3] / 2=0.740484429065744\n","-----bs[i,0] + bs[i,2] / 2=0.33891752577319584\n","-----bs[i,0] + bs[i,2] / 2=0.2522421524663677-----bs[i,1] + bs[i,3] / 2=0.39311594202898553\n","\n","-----bs[i,1] + bs[i,3] / 2=0.7733564013840831\n","-----bs[i,0] + bs[i,2] / 2=0.3352017937219731\n","-----bs[i,1] + bs[i,3] / 2=0.7508650519031144\n","-----bs[i,0] + bs[i,2] / 2=0.3721973094170404\n","-----bs[i,1] + bs[i,3] / 2=0.7041522491349481\n","-----bs[i,0] + bs[i,2] / 2=0.8552941176470589-----bs[i,0] + bs[i,2] / 2=0.4551569506726458\n","\n","-----bs[i,1] + bs[i,3] / 2=0.6747404844290658\n","-----bs[i,1] + bs[i,3] / 2=0.6551724137931035\n","-----bs[i,0] + bs[i,2] / 2=0.4147982062780269-----bs[i,0] + bs[i,2] / 2=0.5694117647058824\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5532915360501567-----bs[i,1] + bs[i,3] / 2=0.7733564013840831\n","-----bs[i,0] + bs[i,2] / 2=0.23176470588235293\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5532915360501568\n","-----bs[i,0] + bs[i,2] / 2=0.4360986547085203\n","-----bs[i,1] + bs[i,3] / 2=0.8408304498269897\n","-----bs[i,0] + bs[i,2] / 2=0.5011210762331839\n","-----bs[i,1] + bs[i,3] / 2=0.6643598615916956\n","-----bs[i,0] + bs[i,2] / 2=0.4786995515695067-----bs[i,0] + bs[i,2] / 2=0.9788918205804749\n","\n","-----bs[i,1] + bs[i,3] / 2=0.9908494809688582\n","-----bs[i,1] + bs[i,3] / 2=0.2345360824742268-----bs[i,0] + bs[i,2] / 2=0.4719730941704037\n","-----bs[i,1] + bs[i,3] / 2=0.5743944636678201\n","\n","-----bs[i,0] + bs[i,2] / 2=0.87467018469657-----bs[i,0] + bs[i,2] / 2=0.42264573991031396\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5415224913494809-----bs[i,1] + bs[i,3] / 2=0.5025773195876289\n","\n","-----bs[i,0] + bs[i,2] / 2=0.515695067264574-----bs[i,0] + bs[i,2] / 2=0.5686015831134565\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5795847750865053-----bs[i,1] + bs[i,3] / 2=0.3917525773195877\n","\n","-----bs[i,0] + bs[i,2] / 2=0.6165919282511212-----bs[i,0] + bs[i,2] / 2=0.18733509234828488\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5086505190311419-----bs[i,1] + bs[i,3] / 2=0.32731958762886604\n","\n","-----bs[i,0] + bs[i,2] / 2=0.6692825112107623-----bs[i,0] + bs[i,2] / 2=0.2994722955145118\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5190311418685121-----bs[i,1] + bs[i,3] / 2=0.33762886597938147\n","\n","-----bs[i,0] + bs[i,2] / 2=0.7757847533632287-----bs[i,0] + bs[i,2] / 2=0.08970976253298152\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5899653979238755-----bs[i,1] + bs[i,3] / 2=0.18814432989690721\n","\n","-----bs[i,0] + bs[i,2] / 2=0.7308707124010555\n","-----bs[i,1] + bs[i,3] / 2=0.288659793814433\n","-----bs[i,0] + bs[i,2] / 2=0.6142191142191142\n","-----bs[i,1] + bs[i,3] / 2=0.4895287958115183\n","-----bs[i,0] + bs[i,2] / 2=0.35664335664335667\n","-----bs[i,1] + bs[i,3] / 2=0.4162303664921466\n","-----bs[i,0] + bs[i,2] / 2=0.26223776223776224-----bs[i,0] + bs[i,2] / 2=0.2653333333333333\n","-----bs[i,1] + bs[i,3] / 2=0.4921465968586387\n","\n","-----bs[i,0] + bs[i,2] / 2=0.21561771561771556-----bs[i,1] + bs[i,3] / 2=0.4204753199268738\n","\n","-----bs[i,0] + bs[i,2] / 2=0.372-----bs[i,1] + bs[i,3] / 2=0.2670157068062827\n","\n","-----bs[i,1] + bs[i,3] / 2=0.42595978062157225\n","-----bs[i,0] + bs[i,2] / 2=0.4706666666666667\n","-----bs[i,1] + bs[i,3] / 2=0.42138939670932357\n","-----bs[i,0] + bs[i,2] / 2=0.5880000000000001\n","-----bs[i,1] + bs[i,3] / 2=0.4625228519195613\n","-----bs[i,0] + bs[i,2] / 2=0.7546666666666667\n","-----bs[i,1] + bs[i,3] / 2=0.44149908592321757\n","-----bs[i,0] + bs[i,2] / 2=0.9346666666666668-----bs[i,0] + bs[i,2] / 2=0.30044843049327363\n","-----bs[i,1] + bs[i,3] / 2=0.4524680073126143\n","-----bs[i,1] + bs[i,3] / 2=0.8219584569732936\n","\n","-----bs[i,0] + bs[i,2] / 2=0.5179856115107914\n","-----bs[i,1] + bs[i,3] / 2=0.44861660079051385\n","-----bs[i,0] + bs[i,2] / 2=0.6778290993071594\n","-----bs[i,1] + bs[i,3] / 2=0.1794117647058823\n","-----bs[i,0] + bs[i,2] / 2=0.5519630484988454\n","-----bs[i,1] + bs[i,3] / 2=0.12058823529411761\n","-----bs[i,0] + bs[i,2] / 2=0.47344110854503463\n","-----bs[i,1] + bs[i,3] / 2=0.29117647058823526\n","-----bs[i,0] + bs[i,2] / 2=0.2690531177829099\n","-----bs[i,1] + bs[i,3] / 2=0.25588235294117634-----bs[i,0] + bs[i,2] / 2=0.9818435754189945\n","\n","-----bs[i,1] + bs[i,3] / 2=0.16836734693877553\n","-----bs[i,0] + bs[i,2] / 2=0.7737430167597765\n","-----bs[i,1] + bs[i,3] / 2=0.13435374149659865\n","-----bs[i,0] + bs[i,2] / 2=0.548882681564246\n","-----bs[i,1] + bs[i,3] / 2=0.20408163265306126\n","-----bs[i,0] + bs[i,2] / 2=0.3868715083798884\n","-----bs[i,1] + bs[i,3] / 2=0.19727891156462588\n","-----bs[i,0] + bs[i,2] / 2=0.09090909090909091\n","-----bs[i,1] + bs[i,3] / 2=0.23561151079136688\n","-----bs[i,0] + bs[i,2] / 2=0.5052447552447552\n","-----bs[i,1] + bs[i,3] / 2=0.2805755395683453\n","-----bs[i,0] + bs[i,2] / 2=0.9767727272727273\n","-----bs[i,1] + bs[i,3] / 2=0.237410071942446\n","-----bs[i,0] + bs[i,2] / 2=0.7954545454545454\n","-----bs[i,1] + bs[i,3] / 2=0.5747663551401869\n","-----bs[i,0] + bs[i,2] / 2=0.6655844155844156\n","-----bs[i,1] + bs[i,3] / 2=0.6479750778816199\n","-----bs[i,0] + bs[i,2] / 2=0.4729437229437229\n","-----bs[i,1] + bs[i,3] / 2=0.5280373831775702\n","-----bs[i,0] + bs[i,2] / 2=0.27489177489177485\n","-----bs[i,0] + bs[i,2] / 2=0.8445273631840795-----bs[i,1] + bs[i,3] / 2=0.633956386292835\n","\n","-----bs[i,1] + bs[i,3] / 2=0.13050847457627118\n","-----bs[i,0] + bs[i,2] / 2=0.1493506493506493-----bs[i,0] + bs[i,2] / 2=0.6890547263681592\n","\n","-----bs[i,1] + bs[i,3] / 2=0.5\n","-----bs[i,1] + bs[i,3] / 2=0.2101694915254237\n","-----bs[i,0] + bs[i,2] / 2=0.5497512437810945\n","-----bs[i,1] + bs[i,3] / 2=0.28305084745762715\n","-----bs[i,0] + bs[i,2] / 2=0.32711442786069644\n","-----bs[i,1] + bs[i,3] / 2=0.22542372881355935\n","-----bs[i,0] + bs[i,2] / 2=0.20771144278606957\n","-----bs[i,1] + bs[i,3] / 2=0.25084745762711863\n","-----bs[i,0] + bs[i,2] / 2=0.3045685279187817\n","-----bs[i,1] + bs[i,3] / 2=0.3923766816143498\n","-----bs[i,0] + bs[i,2] / 2=0.8804664723032071\n","-----bs[i,1] + bs[i,3] / 2=0.5275049115913557\n","-----bs[i,0] + bs[i,2] / 2=0.47376093294460636\n","-----bs[i,1] + bs[i,3] / 2=0.3300589390962672\n","-----bs[i,0] + bs[i,2] / 2=0.2279874213836478\n","-----bs[i,1] + bs[i,3] / 2=0.5772532188841202\n","-----bs[i,0] + bs[i,2] / 2=0.5361635220125787\n","-----bs[i,1] + bs[i,3] / 2=0.4120171673819743\n","-----bs[i,0] + bs[i,2] / 2=0.9806320754716982-----bs[i,0] + bs[i,2] / 2=0.7442622950819672\n","\n","-----bs[i,1] + bs[i,3] / 2=0.6351931330472103-----bs[i,1] + bs[i,3] / 2=0.553811659192825\n","-----bs[i,0] + bs[i,2] / 2=0.1590163934426228\n","-----bs[i,1] + bs[i,3] / 2=0.4798206278026906\n","\n","-----bs[i,0] + bs[i,2] / 2=0.4956140350877193\n","-----bs[i,1] + bs[i,3] / 2=0.5882352941176471\n","-----bs[i,0] + bs[i,2] / 2=0.564903846153846\n","-----bs[i,1] + bs[i,3] / 2=0.545673076923077\n","-----bs[i,0] + bs[i,2] / 2=0.7019230769230769\n","-----bs[i,1] + bs[i,3] / 2=0.53125\n","-----bs[i,0] + bs[i,2] / 2=0.5960000000000001\n","-----bs[i,1] + bs[i,3] / 2=0.5144230769230769\n","-----bs[i,0] + bs[i,2] / 2=0.9253333333333333\n","-----bs[i,1] + bs[i,3] / 2=0.7724358974358974\n","-----bs[i,0] + bs[i,2] / 2=0.9079999999999999\n","-----bs[i,1] + bs[i,3] / 2=0.2227564102564103\n","-----bs[i,0] + bs[i,2] / 2=0.6466666666666666\n","-----bs[i,1] + bs[i,3] / 2=0.23397435897435898\n","-----bs[i,0] + bs[i,2] / 2=0.30533333333333346\n","-----bs[i,1] + bs[i,3] / 2=0.2740384615384615\n","-----bs[i,0] + bs[i,2] / 2=0.44533333333333325\n","-----bs[i,1] + bs[i,3] / 2=0.10256410256410256\n","-----bs[i,0] + bs[i,2] / 2=0.21600000000000008\n","-----bs[i,1] + bs[i,3] / 2=0.04807692307692307-----bs[i,0] + bs[i,2] / 2=0.11829268292682929\n","-----bs[i,0] + bs[i,2] / 2=0.9733333333333333\n","-----bs[i,1] + bs[i,3] / 2=0.2516025641025641\n","-----bs[i,0] + bs[i,2] / 2=0.08000000000000002\n","-----bs[i,1] + bs[i,3] / 2=0.04967948717948717\n","-----bs[i,0] + bs[i,2] / 2=0.3186666666666667\n","-----bs[i,1] + bs[i,3] / 2=0.3088737201365188\n","-----bs[i,1] + bs[i,3] / 2=0.04006410256410256\n","\n","-----bs[i,0] + bs[i,2] / 2=0.3317073170731708\n","-----bs[i,0] + bs[i,2] / 2=0.5386666666666665-----bs[i,1] + bs[i,3] / 2=0.3617747440273038\n","-----bs[i,1] + bs[i,3] / 2=0.12019230769230768\n","\n","-----bs[i,0] + bs[i,2] / 2=0.4804878048780488-----bs[i,0] + bs[i,2] / 2=0.053833333333333344\n","\n","-----bs[i,1] + bs[i,3] / 2=0.2849829351535836-----bs[i,1] + bs[i,3] / 2=0.20192307692307693\n","\n","-----bs[i,0] + bs[i,2] / 2=0.5829268292682928\n","-----bs[i,1] + bs[i,3] / 2=0.32423208191126285\n","-----bs[i,0] + bs[i,2] / 2=0.008536585365853652\n","-----bs[i,1] + bs[i,3] / 2=0.3037542662116041\n","-----bs[i,0] + bs[i,2] / 2=0.40236686390532544\n","-----bs[i,1] + bs[i,3] / 2=0.2697740112994351\n","-----bs[i,0] + bs[i,2] / 2=0.7347826086956522\n","-----bs[i,1] + bs[i,3] / 2=0.2274368231046932\n","-----bs[i,0] + bs[i,2] / 2=0.5826086956521739\n","-----bs[i,1] + bs[i,3] / 2=0.19855595667870035\n","-----bs[i,0] + bs[i,2] / 2=0.28985507246376807-----bs[i,0] + bs[i,2] / 2=0.6289808917197452\n","-----bs[i,1] + bs[i,3] / 2=0.16245487364620942\n","\n","-----bs[i,1] + bs[i,3] / 2=0.580896686159844-----bs[i,0] + bs[i,2] / 2=0.005500000000000005\n","\n","-----bs[i,1] + bs[i,3] / 2=0.18411552346570398\n","-----bs[i,0] + bs[i,2] / 2=0.22112676056338026\n","-----bs[i,1] + bs[i,3] / 2=0.5317220543806647\n","-----bs[i,0] + bs[i,2] / 2=0.3633802816901408\n","-----bs[i,1] + bs[i,3] / 2=0.49093655589123875\n","--------------------------train_batch=0\n","-----bs[i,0] + bs[i,2] / 2=0.4380281690140845\n","-----bs[i,0] + bs[i,2] / 2=0.7357142857142858-----bs[i,1] + bs[i,3] / 2=0.46827794561933533\n","\n","-----bs[i,0] + bs[i,2] / 2=0.515492957746479-----bs[i,1] + bs[i,3] / 2=0.5902061855670103\n","\n","-----bs[i,1] + bs[i,3] / 2=0.7024169184290031-----bs[i,0] + bs[i,2] / 2=0.5628571428571428\n","\n","-----bs[i,0] + bs[i,2] / 2=0.619718309859155-----bs[i,1] + bs[i,3] / 2=0.3969072164948453\n","\n","-----bs[i,0] + bs[i,2] / 2=0.4685714285714285\n","-----bs[i,1] + bs[i,3] / 2=0.3221649484536082-----bs[i,1] + bs[i,3] / 2=0.4184290030211481\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9521126760563381-----bs[i,0] + bs[i,2] / 2=0.3342857142857143\n","\n","-----bs[i,1] + bs[i,3] / 2=0.41087613293051367-----bs[i,1] + bs[i,3] / 2=0.31443298969072164\n","\n","-----bs[i,0] + bs[i,2] / 2=0.22571428571428576-----bs[i,0] + bs[i,2] / 2=0.9944999999999999\n","\n","-----bs[i,1] + bs[i,3] / 2=0.46827794561933533-----bs[i,1] + bs[i,3] / 2=0.39432989690721654\n","-----bs[i,0] + bs[i,2] / 2=0.6830985915492958\n","\n","-----bs[i,1] + bs[i,3] / 2=0.35347432024169184-----bs[i,0] + bs[i,2] / 2=0.16428571428571426\n","\n","-----bs[i,0] + bs[i,2] / 2=0.7887323943661972-----bs[i,1] + bs[i,3] / 2=0.12113402061855671\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9057142857142858-----bs[i,1] + bs[i,3] / 2=0.32477341389728104\n","\n","-----bs[i,0] + bs[i,2] / 2=0.7183098591549297-----bs[i,1] + bs[i,3] / 2=0.41237113402061853\n","\n","-----bs[i,1] + bs[i,3] / 2=0.24924471299093656\n","-----bs[i,0] + bs[i,2] / 2=0.6070422535211268\n","-----bs[i,1] + bs[i,3] / 2=0.22356495468277948\n","-----bs[i,0] + bs[i,2] / 2=0.2676056338028169\n","-----bs[i,1] + bs[i,3] / 2=0.39577039274924475\n","-----bs[i,0] + bs[i,2] / 2=0.39014084507042257\n","-----bs[i,1] + bs[i,3] / 2=0.3353474320241692\n","-----bs[i,0] + bs[i,2] / 2=0.2535211267605634-----bs[i,0] + bs[i,2] / 2=0.6902173913043479\n","\n","-----bs[i,1] + bs[i,3] / 2=0.33081570996978854\n","-----bs[i,1] + bs[i,3] / 2=0.544701986754967\n","-----bs[i,0] + bs[i,2] / 2=0.4859154929577465-----bs[i,0] + bs[i,2] / 2=0.38315217391304346\n","\n","-----bs[i,1] + bs[i,3] / 2=0.3761329305135952-----bs[i,1] + bs[i,3] / 2=0.5033112582781458\n","\n","-----bs[i,0] + bs[i,2] / 2=0.4380281690140845\n","-----bs[i,1] + bs[i,3] / 2=0.2477341389728097\n","-----bs[i,0] + bs[i,2] / 2=0.2563380281690141\n","-----bs[i,1] + bs[i,3] / 2=0.24169184290030216\n","-----bs[i,0] + bs[i,2] / 2=0.3211267605633803\n","-----bs[i,1] + bs[i,3] / 2=0.2960725075528702\n","-----bs[i,0] + bs[i,2] / 2=0.19295774647887326\n","-----bs[i,1] + bs[i,3] / 2=0.3141993957703928\n","-----bs[i,0] + bs[i,2] / 2=0.17183098591549295\n","-----bs[i,0] + bs[i,2] / 2=0.6614481409001958-----bs[i,1] + bs[i,3] / 2=0.26586102719033233\n","\n","-----bs[i,0] + bs[i,2] / 2=0.3380281690140845-----bs[i,1] + bs[i,3] / 2=0.31375838926174493\n","\n","-----bs[i,0] + bs[i,2] / 2=0.47064579256360084-----bs[i,1] + bs[i,3] / 2=0.21148036253776437\n","\n","-----bs[i,1] + bs[i,3] / 2=0.38926174496644295\n","-----bs[i,0] + bs[i,2] / 2=0.33659491193737784\n","-----bs[i,1] + bs[i,3] / 2=0.4060402684563758\n","-----bs[i,0] + bs[i,2] / 2=0.20254403131115473\n","-----bs[i,1] + bs[i,3] / 2=0.3959731543624161\n","-----bs[i,0] + bs[i,2] / 2=0.7372372372372371\n","-----bs[i,1] + bs[i,3] / 2=0.32631578947368417\n","-----bs[i,0] + bs[i,2] / 2=0.6456456456456457\n","-----bs[i,1] + bs[i,3] / 2=0.3236842105263158\n","-----bs[i,0] + bs[i,2] / 2=0.11711711711711709\n","-----bs[i,1] + bs[i,3] / 2=0.28157894736842104\n","-----bs[i,0] + bs[i,2] / 2=0.03012048192771085\n","-----bs[i,1] + bs[i,3] / 2=0.2304832713754647\n","-----bs[i,0] + bs[i,2] / 2=0.1280120481927711\n","-----bs[i,1] + bs[i,3] / 2=0.23977695167286248\n","-----bs[i,0] + bs[i,2] / 2=0.2364457831325301\n","-----bs[i,1] + bs[i,3] / 2=0.529739776951673\n","-----bs[i,0] + bs[i,2] / 2=0.4563253012048193\n","-----bs[i,1] + bs[i,3] / 2=0.23977695167286245\n","-----bs[i,0] + bs[i,2] / 2=0.5602409638554218-----bs[i,0] + bs[i,2] / 2=0.16\n","\n","-----bs[i,1] + bs[i,3] / 2=0.1468401486988848-----bs[i,1] + bs[i,3] / 2=0.4083044982698962\n","\n","-----bs[i,0] + bs[i,2] / 2=0.6837349397590362-----bs[i,0] + bs[i,2] / 2=0.289\n","-----bs[i,1] + bs[i,3] / 2=0.1765799256505576\n","-----bs[i,1] + bs[i,3] / 2=0.2923875432525952\n","\n","-----bs[i,0] + bs[i,2] / 2=0.8509036144578315-----bs[i,0] + bs[i,2] / 2=0.435\n","\n","-----bs[i,1] + bs[i,3] / 2=0.19330855018587365-----bs[i,1] + bs[i,3] / 2=0.48788927335640137\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9392590361445783-----bs[i,0] + bs[i,2] / 2=0.671\n","\n","-----bs[i,1] + bs[i,3] / 2=0.25650557620817843-----bs[i,1] + bs[i,3] / 2=0.2681660899653979\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9944999999999999\n","-----bs[i,1] + bs[i,3] / 2=0.3382899628252788\n","-----bs[i,0] + bs[i,2] / 2=0.8027108433734942\n","-----bs[i,1] + bs[i,3] / 2=0.6468401486988848\n","-----bs[i,0] + bs[i,2] / 2=0.3707124010554089\n","-----bs[i,1] + bs[i,3] / 2=0.4798488664987406\n","-----bs[i,0] + bs[i,2] / 2=0.88671875\n","-----bs[i,1] + bs[i,3] / 2=0.27959183673469384\n","-----bs[i,0] + bs[i,2] / 2=0.5638020833333334\n","-----bs[i,1] + bs[i,3] / 2=0.05918367346938774\n","-----bs[i,0] + bs[i,2] / 2=0.5885416666666666\n","-----bs[i,1] + bs[i,3] / 2=0.3918367346938775\n","-----bs[i,0] + bs[i,2] / 2=0.5846354166666666-----bs[i,0] + bs[i,2] / 2=0.3879310344827586\n","\n","-----bs[i,1] + bs[i,3] / 2=0.9076632653061225-----bs[i,1] + bs[i,3] / 2=0.3614457831325301\n","\n","-----bs[i,0] + bs[i,2] / 2=0.2565104166666666-----bs[i,0] + bs[i,2] / 2=0.5402298850574712\n","\n","-----bs[i,1] + bs[i,3] / 2=0.42018072289156627-----bs[i,1] + bs[i,3] / 2=0.38367346938775515\n","\n","-----bs[i,0] + bs[i,2] / 2=0.75-----bs[i,0] + bs[i,2] / 2=0.3567708333333333\n","\n","-----bs[i,1] + bs[i,3] / 2=0.4036144578313253-----bs[i,1] + bs[i,3] / 2=0.061224489795918366\n","\n","-----bs[i,0] + bs[i,2] / 2=0.8807471264367815-----bs[i,0] + bs[i,2] / 2=0.10416666666666663\n","\n","-----bs[i,1] + bs[i,3] / 2=0.47289156626506024-----bs[i,1] + bs[i,3] / 2=0.061224489795918366\n","\n","-----bs[i,0] + bs[i,2] / 2=0.9382183908045976\n","-----bs[i,1] + bs[i,3] / 2=0.4307228915662651\n","-----bs[i,0] + bs[i,2] / 2=0.9944999999999999\n","-----bs[i,1] + bs[i,3] / 2=0.4924698795180723\n","-----bs[i,0] + bs[i,2] / 2=0.3129411764705883\n","-----bs[i,1] + bs[i,3] / 2=0.2426778242677824\n","-----bs[i,0] + bs[i,2] / 2=0.5164705882352941\n","-----bs[i,0] + bs[i,2] / 2=0.770893371757925-----bs[i,1] + bs[i,3] / 2=0.20292887029288703\n","\n","-----bs[i,1] + bs[i,3] / 2=0.10714285714285715\n","-----bs[i,0] + bs[i,2] / 2=0.7647058823529412-----bs[i,0] + bs[i,2] / 2=0.5417867435158501\n","\n","-----bs[i,1] + bs[i,3] / 2=0.09205020920502092-----bs[i,1] + bs[i,3] / 2=0.28316326530612246-----bs[i,0] + bs[i,2] / 2=0.6035294117647059\n","\n","\n","-----bs[i,0] + bs[i,2] / 2=0.29682997118155613-----bs[i,1] + bs[i,3] / 2=0.22175732217573219\n","-----bs[i,1] + bs[i,3] / 2=0.2959183673469388-----bs[i,0] + bs[i,2] / 2=0.7\n","\n","\n","-----bs[i,1] + bs[i,3] / 2=0.19665271966527195\n","-----bs[i,0] + bs[i,2] / 2=0.25058823529411767\n","-----bs[i,1] + bs[i,3] / 2=0.28242677824267776\n","-----bs[i,0] + bs[i,2] / 2=0.851764705882353\n","-----bs[i,1] + bs[i,3] / 2=0.2112970711297071\n","-----bs[i,0] + bs[i,2] / 2=0.9294117647058823\n","-----bs[i,1] + bs[i,3] / 2=0.20711297071129706\n","-----bs[i,0] + bs[i,2] / 2=0.38316582914572866\n","-----bs[i,1] + bs[i,3] / 2=0.4064885496183206\n","-----bs[i,0] + bs[i,2] / 2=0.7160278745644599\n","-----bs[i,1] + bs[i,3] / 2=0.55\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-9-812f1de43a34>:119: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\n","  obj_axis_pred = obj_loc_pred[coo_response_mask].view(-1, 4)\n","<ipython-input-9-812f1de43a34>:120: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\n","  obj_axis_target = obj_loc_target[coo_response_mask].view(-1, 4)\n","<ipython-input-9-812f1de43a34>:124: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\n","  obj_response_pred = obj_contain_pred[iou_response_mask].view(-1)\n","<ipython-input-9-812f1de43a34>:125: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\n","  obj_response_target = obj_contain_target[iou_response_mask].view(-1)\n","/usr/local/lib/python3.10/dist-packages/torch/nn/_reduction.py:51: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.\n","  warnings.warn(warning.format(ret))\n","  0%|  | 0/57 [00:05<?, ?it/s]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-dff94ada37b0>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m         \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m         \u001b[0mloss_xx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_detect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1736\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m     \u001b[0;31m# torchrec tests the code consistency with the following code\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1745\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1746\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1747\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1748\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1749\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-9-812f1de43a34>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, pred, target)\u001b[0m\n\u001b[1;32m    149\u001b[0m             \u001b[0;34m'no_contain_loss'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ml_noobj\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mno_obj_contain_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m             \u001b[0;34m'iou_loss'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0miou_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m             \u001b[0;34m'mean_iou'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_iou\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m         }\n\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"wjZdKdSUnJpk"},"source":[]},{"cell_type":"code","metadata":{"id":"ttpSKyUhT4-B"},"source":["#  Let's try to perform inference for single image\n","\n","def predict_gpu(model,image_name):\n","\n","    image = cv2.imread(image_name)\n","    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","    h,w,_ = image.shape\n","    img = cv2.resize(image,(448,448))\n","\n","    # Do remember that the following transform only accepts input to be numpy array instead PIL image\n","    # Therefore, the previously-defined transfroms() can't be used here\n","    transform = transforms.Compose([transforms.ToTensor(),transforms.Normalize([0.485, 0.456, 0.406], [1, 1, 1])])\n","    # image is an torch tensor\n","    img = transform(img)*255\n","    #  None = NP.newaxis and the reason why doing this is that model inference would only accept 4-d torch tensor.\n","    img = Variable(img[None,:,:,:])\n","    img = img.cuda()\n","\n","    pred= model(img)\n","    # detection_classses contains object id and its confidence\n","    boxes, detection_classses = yolo_box_decoder(pred,conf_thresh=0.1,nms_thresh=0.5)\n","\n","    return boxes,detection_classses\n","\n","def plot_boxes_cv2(img, boxes, detection_classses, class_names=None, color=None):\n","\n","    width = img.shape[1]\n","    height = img.shape[0]\n","\n","    for j in range(len(boxes)):\n","\n","        x1 = boxes[j,0]\n","        y1 = boxes[j,1]\n","        x2 = x1 + boxes[j,2]\n","        y2 = y1 + boxes[j,3]\n","        x1,x2 = int(x1*width),int(x2*width)\n","        y1,y2 = int(y1*height),int(y2*height)\n","\n","        cls_id = int(detection_classses[j,0])\n","        prob = float(detection_classses[j,1])\n","        print(prob)\n","        print(cls_id)\n","\n","        #img = cv2.putText(img, class_names[cls_id], (x1,y1),  cv2.FONT_HERSHEY_PLAIN, 1.0, (0,0,255), thickness=1)\n","        #img = cv2.putText(img, str(round(prob,3)), (x1,y1+20),  cv2.FONT_HERSHEY_PLAIN, 1.0, (0,0,255), thickness=1)\n","\n","\n","        img = cv2.rectangle(img, (x1,y1), (x2,y2), (0, 255, 0), 2)\n","        img = cv2.rectangle(img, (x1,y1), (x2,y1+15), (255, 255, 255), -1)\n","\n","        detection_result = class_names[cls_id] + ':' + str(round(prob,3))\n","        img = cv2.putText(img, detection_result , (x1,y1+15),  cv2.FONT_HERSHEY_PLAIN, 1.0, (0,0,255), thickness=1)\n","\n","        img = cv2.rectangle(img, (x1,y1), (x2,y2), (0, 255, 0), 2)\n","\n","    return img\n","\n","model = YOLO(cls_num, bbox_num, box_scale)\n","model.eval()\n","# 1. load your best model trained so far.\n","#model.load_state_dict(torch.load( model_path + 'best_.pkl'))\n","# 2. load example model trained for only a few epochs\n","model.load_state_dict(torch.load( model_path + 'best_0.104.pkl'))\n","model.cuda()\n","\n","# testing image\n","#image_name = VOC_root_dir + \"images/maksssksksss841.png\" # without_mask: conf_thresh=0.2\n","#image_name = VOC_root_dir + \"images/maksssksksss762.png\" # with_mask: conf_thresh=0.2\n","image_name = VOC_root_dir + \"images/maksssksksss132.png\" # mask_weared_incorrect: conf_thresh=0.1 otherwise, result can be seen!\n","\n","image = cv2.imread(image_name)\n","# performing inference\n","boxes, detection_classses = predict_gpu(model,image_name)\n","# overlapping detection bounding box\n","image = plot_boxes_cv2(image, boxes, detection_classses, class_names = classes, color=None)\n","\n","cv2_imshow(image)\n"],"execution_count":null,"outputs":[]}]}